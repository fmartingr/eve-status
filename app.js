// Generated by CoffeeScript 1.3.3
(function() {
  var API_URL, DEBUG, LAST_INFO, XML_PATH, app, calculateTimeout, checkStatus, createTimeout, elementtree, express, https, moment;

  https = require('https');

  elementtree = require('elementtree');

  moment = require('moment');

  express = require('express');

  app = express();

  DEBUG = true;

  API_URL = 'https://api.eveonline.com/server/ServerStatus.xml.aspx/';

  XML_PATH = 'result/';

  LAST_INFO = '';

  /*
  # Calculate the seconds from now to a given date
  */


  calculateTimeout = function(_until, _untilFormat) {
    var from, range, to;
    if (_untilFormat == null) {
      _untilFormat = 'YYYY-MM-DD HH:mm:ss';
    }
    from = moment().unix();
    to = moment(_until, _untilFormat).unix();
    return range = parseInt(to - from);
  };

  /*
  # Calculate and create a timeout for the next data check
  */


  createTimeout = function() {
    var range;
    range = calculateTimeout(LAST_INFO.cachedUntil);
    range += 1;
    if (range <= 0) {
      range = 120;
    }
    setTimeout(function() {
      return checkStatus();
    }, range * 1000);
    if (DEBUG) {
      return console.log("Setting timeout for next check: " + range + " seconds");
    }
  };

  /*
  # Make a petition to the EVE Online API and get the data
  */


  checkStatus = function() {
    return https.get(API_URL, function(response) {
      var data;
      data = '';
      response.on('data', function(chunk) {
        return data += chunk;
      });
      return response.on('end', function() {
        var result, tree;
        tree = elementtree.parse(data);
        result = {
          serverOpen: Boolean(tree.findtext("" + XML_PATH + "serverOpen")),
          onlinePlayers: parseInt(tree.findtext("" + XML_PATH + "onlinePlayers")),
          cachedUntil: moment(tree.findtext("cachedUntil"), "YYYY-MM-DD HH:mm:ss").add('h', 1).format("YYYY-MM-DD HH:mm:ss")
        };
        LAST_INFO = result;
        return createTimeout();
      });
    }).on('error', function(error) {
      createTimeout();
      return console.log(error.message);
    });
  };

  checkStatus();

  app.get('/status', function(request, response) {
    var data;
    data = LAST_INFO;
    data.timeout = calculateTimeout(LAST_INFO.cachedUntil) + 2;
    response.send(data);
    return response.end();
  });

  if (DEBUG) {
    app.get('/force_check', function(request, response) {
      checkStatus();
      return response.end();
    });
  }

  app.configure(function() {
    return app.use(express["static"](__dirname + '/public'));
  });

  app.listen(process.env.VCAP_APP_PORT || 3000);

}).call(this);
